// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  termsAccepted Boolean  @default(false)
  refreshToken  String?
  phone         String?
  imgUrl        String?  @default("https://t3.ftcdn.net/jpg/06/33/54/78/360_F_633547842_AugYzexTpMJ9z1YcpTKUBoqBF0CUCk10.jpg")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  reviews               Review[]
  passwordResetRequests ForgotPasswordRequest[]
  addresses             ShippingAddress[]
  wishlist              Wishlist[]
  orders                Order[]
}

model ForgotPasswordRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  otp         String
  isVerified  Boolean  @default(false)
  secureToken String?
  expireAt    DateTime
  createdAt   DateTime @default(now())
}

model ShippingAddress {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName          String
  phone             String
  addressLine1      String
  addressLine2      String?
  city              String
  state             String
  pincode           String
  isDefaultShipping Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Order             Order[]
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  slug        String  @unique // for seo
  imageUrl    String?

  parentId Int?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Category[] @relation("CategoryHierarchy")

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, parentId])
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String
  brand           String
  slug            String   @unique
  description     String
  longDescription String
  basePrice       Float? //incase product has no variant
  salePrice       Float? // if it has discount on base product
  inStock         Boolean
  stockQuantity   Int?
  isVariant       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  images         ProductImage[]
  categoryId     Int
  category       Category         @relation(fields: [categoryId], references: [id])
  variants       ProductVariant[]
  reviews        Review[]
  additionalInfo Json?

  wishlist  Wishlist[]
  orderItem OrderItem[]
}

model ProductVariant {
  id            Int            @id @default(autoincrement())
  color         String?
  size          String?
  price         Float
  salePrice     Float?
  stockQuantity Int
  sku           String         @unique
  images        ProductImage[]
  productId     Int
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id          Int             @id @default(autoincrement())
  url         String
  isMainImage Boolean         @default(false)
  productId   Int? // Optional if the image is linked to a product directly (for simple products)
  product     Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId   Int? // Optional if the image is linked to a specific variant
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  title     String?
  comment   String?
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Order {
  id                Int             @id @default(autoincrement())

  userId            Int
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  shippingAddressId Int
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)

  orderStatus   OrderStatus   @default(INPROCESS)
  paymentStatus PaymentStatus @default(PENDING)
  totalAmount Float
  items       OrderItem[]
  razorpayOrderId   String?
  razorpayPaymentId String?
  stripeCheckoutId  String?
  failureReason     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int    
  price     Float
}

enum PaymentStatus {
  PENDING // Payment is yet to be made
  COMPLETED // Payment completed successfully
  FAILED // Payment failed
  REFUNDED // Payment refunded
}

enum OrderStatus {
  FAILED   //Order has been failed due to transaction
  INPROCESS // Order has been placed but not yet confirmed
  CONFIRMED // Order has been confirmed (inventory check passed, etc.)
  PACKED // Order has been packed
  SHIPPED // Order has been shipped
  OUT_FOR_DELIVERY // Order is out for delivery
  DELIVERED // Order has been delivered successfully
  CANCELLED // Order was cancelled by the user or admin
  RETURNED // Order has been returned by the user
}
